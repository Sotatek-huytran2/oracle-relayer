// Code generated by MockGen. DO NOT EDIT.
// Source: executor/executor.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	types "github.com/aximchain/go-sdk/common/types"
	msg "github.com/aximchain/go-sdk/types/msg"
	common "github.com/Sotatek-huytran2/oracle-relayer/common"
	gomock "github.com/golang/mock/gomock"
)

// MockAfcExecutor is a mock of AfcExecutor interface
type MockAfcExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockAfcExecutorMockRecorder
}

// MockAfcExecutorMockRecorder is the mock recorder for MockAfcExecutor
type MockAfcExecutorMockRecorder struct {
	mock *MockAfcExecutor
}

// NewMockAfcExecutor creates a new mock instance
func NewMockAfcExecutor(ctrl *gomock.Controller) *MockAfcExecutor {
	mock := &MockAfcExecutor{ctrl: ctrl}
	mock.recorder = &MockAfcExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAfcExecutor) EXPECT() *MockAfcExecutorMockRecorder {
	return m.recorder
}

// GetAddress mocks base method
func (m *MockAfcExecutor) GetAddress() types.ValAddress {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress")
	ret0, _ := ret[0].(types.ValAddress)
	return ret0
}

// GetAddress indicates an expected call of GetAddress
func (mr *MockAfcExecutorMockRecorder) GetAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockAfcExecutor)(nil).GetAddress))
}

// GetCurrentSequence mocks base method
func (m *MockAfcExecutor) GetCurrentSequence(chainId uint16) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentSequence", chainId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentSequence indicates an expected call of GetCurrentSequence
func (mr *MockAfcExecutorMockRecorder) GetCurrentSequence(chainId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentSequence", reflect.TypeOf((*MockAfcExecutor)(nil).GetCurrentSequence), chainId)
}

// GetProphecy mocks base method
func (m *MockAfcExecutor) GetProphecy(chainId uint16, sequence int64) (*msg.Prophecy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProphecy", chainId, sequence)
	ret0, _ := ret[0].(*msg.Prophecy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProphecy indicates an expected call of GetProphecy
func (mr *MockAfcExecutorMockRecorder) GetProphecy(chainId, sequence interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProphecy", reflect.TypeOf((*MockAfcExecutor)(nil).GetProphecy), chainId, sequence)
}

// Claim mocks base method
func (m *MockAfcExecutor) Claim(chainId uint16, sequence uint64, payload []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Claim", chainId, sequence, payload)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Claim indicates an expected call of Claim
func (mr *MockAfcExecutorMockRecorder) Claim(chainId, sequence, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Claim", reflect.TypeOf((*MockAfcExecutor)(nil).Claim), chainId, sequence, payload)
}

// MockAscExecutor is a mock of AscExecutor interface
type MockAscExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockAscExecutorMockRecorder
}

// MockAscExecutorMockRecorder is the mock recorder for MockAscExecutor
type MockAscExecutorMockRecorder struct {
	mock *MockAscExecutor
}

// NewMockAscExecutor creates a new mock instance
func NewMockAscExecutor(ctrl *gomock.Controller) *MockAscExecutor {
	mock := &MockAscExecutor{ctrl: ctrl}
	mock.recorder = &MockAscExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAscExecutor) EXPECT() *MockAscExecutorMockRecorder {
	return m.recorder
}

// GetBlockAndPackages mocks base method
func (m *MockAscExecutor) GetBlockAndPackages(height int64) (*common.BlockAndPackageLogs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockAndPackages", height)
	ret0, _ := ret[0].(*common.BlockAndPackageLogs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockAndPackages indicates an expected call of GetBlockAndPackages
func (mr *MockAscExecutorMockRecorder) GetBlockAndPackages(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockAndPackages", reflect.TypeOf((*MockAscExecutor)(nil).GetBlockAndPackages), height)
}
